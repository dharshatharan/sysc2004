#BlueJ class context
comment0.target=Money
comment0.text=\n\ An\ amount\ of\ money\ in\ Canadian\ currency;\ i.e.,\ dollars\ and\ cents.\n\n\ @author\ D.L.\ Bailey,\ Department\ of\ Systems\ and\ Computer\ Engineering,\n\ Carleton\ University\n\ @version\ 1.11,\ March\ 11,\ 2007\n\ \n\ @author\ Lynn\ Marshall\n\ @version\ November\ 24,\ 2012\n
comment1.params=cents
comment1.target=Money(int)
comment1.text=\n\ Constructs\ a\ Money\ object\ whose\ value\ is\ equal\ to\ the\ specified\n\ quantity\ of\ cents,\ which\ can\ be\ positive\ or\ negative,\ and\ <\ -99\ or\ >\ 99.\n\ \n\ @param\ cents\ A\ quantity\ of\ cents.\n\ @see\ Money\#Money(int,\ int)\n
comment10.params=obj
comment10.target=int\ compareTo(java.lang.Object)
comment10.text=\n\ Compares\ this\ Money\ object\ with\ the\ specified\ Money\ object\ for\ order.\ \n\ Returns\ a\ negative\ integer,\ zero,\ or\ a\ positive\ integer\ as\ this\ object\n\ is\ less\ than,\ equal\ to,\ or\ greater\ than\ the\ specified\ object.\n\ \n\ @return\ a\ negative\ integer,\ zero,\ or\ a\ positive\ integer\ as\ this\ object\ \n\ \ \ \ \ \ \ \ \ is\ less\ than,\ equal\ to,\ or\ greater\ than\ the\ specified\ object.\ \ \n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\n\ Returns\ a\ String\ representation\ of\ this\ Money\ object\ in\ the\ form\:\n\ "$ddd.cc"\ or\ "-$ddd.cc",\ where\ ddd\ is\ the\ dollars\ part\ and\ cc\ is\ the\n\ cents\ part.\n\n\ @return\ a\ String\ representation\ of\ this\ Money\ object.\n
comment12.params=obj
comment12.target=boolean\ equals(java.lang.Object)
comment12.text=\n\ Compares\ this\ object\ against\ the\ specified\ object.\n\ The\ result\ is\ true\ if\ and\ only\ if\ the\ argument\ is\n\ not\ null\ and\ is\ a\ Money\ object\ that\ represents\ the\n\ same\ amount\ of\ money\ as\ this\ object.\n\n\ @param\ obj\ the\ object\ that\ is\ compared\ to\ this\ object.\n\n\ @return\ true\ if\ the\ objects\ are\ equal,\ false\ otherwise.\n
comment13.params=number\ cents\ obj
comment13.target=Money\ addMonies(int,\ int,\ java.lang.Object)
comment13.text=\ \n\ A\ method\ to\ use\ for\ learning\ about\ exceptions.\ \n\ \n\ This\ method\ returns\ the\ sum\ of\ "this",\ the\ object\ and\ \n\ number*cents.\ \n\ \n\ @param\ number\ A\ number\ between\ 1\ and\ 10\n\ @param\ cents\ The\ number\ of\ cents\ (between\ 0\ and\ 99)\n\ @param\ obj\ An\ object\n\ \n\ @returns\ The\ sum\ of\ "this",\ obj,\ and\ number*cents\n
comment2.params=dollars\ cents
comment2.target=Money(int,\ int)
comment2.text=\n\ Constructs\ a\ Money\ object\ whose\ value\ is\ equal\ to\ the\ specified\n\ quantity\ of\ dollars\ and\ cents,\ both\ of\ which\ can\ be\ positive\ or\n\ negative.\ Cents\ must\ be\ between\ -99\ and\ 99.\n\n\ @param\ dollars\ A\ quantity\ of\ dollars.\n\ @param\ cents\ A\ quantity\ of\ cents.\n\ @see\ Money(int)\n\ @throws\ IllegalArgumentException\ if\ cents\ outside\ valid\ range\n
comment3.params=
comment3.target=int\ dollars()
comment3.text=\n\ Returns\ the\ dollars\ part\ of\ this\ Money\ object.\ For\ example,\ if\ this\n\ object\ represents\ $9.37,\ 9\ is\ returned;\ and\ if\ this\ object\ represents\n\ -$7.14,\ -7\ is\ returned.\n\n\ @return\ the\ dollars\ part\ of\ this\ Money\ object.\n
comment4.params=
comment4.target=int\ cents()
comment4.text=\n\ Returns\ the\ cents\ part\ of\ this\ Money\ object.\ For\ example,\ if\ this\n\ object\ represents\ $9.37,\ 37\ is\ returned;\ and\ if\ this\ object\ represents\n\ -$7.14,\ -14\ is\ returned.\n\n\ @return\ the\ cents\ part\ of\ this\ Money\ object,\ between\ -99\ and\ 99,\ inclusive.\n
comment5.params=anAmount
comment5.target=Money\ plus(Money)
comment5.text=\n\ Returns\ the\ sum\ of\ this\ Money\ object\ and\ the\ specified\ amount\ of\ money.\n\n\ @param\ anAmount\ the\ Money\ object\ that\ is\ to\ be\ added\ to\ this\ object.\n\ @return\ a\ Money\ object\ equal\ to\ the\ sum\ of\ this\ Money\ object\ and\ anAmount.\n
comment6.params=anAmount
comment6.target=Money\ minus(Money)
comment6.text=\n\ Returns\ the\ difference\ of\ this\ Money\ object\ and\ the\ specified\ amount\ of\ money.\n\n\ @param\ anAmount\ the\ Money\ object\ that\ is\ to\ be\ subtracted\ from\ this\ object.\n\ @return\ a\ Money\ object\ equal\ to\ the\ result\ of\ subtracting\ anAmount\ from\ this\n\ \ \ \ \ \ \ \ \ Money\ object.\n
comment7.params=anAmount
comment7.target=Money\ multipliedBy(int)
comment7.text=\n\ Returns\ the\ result\ of\ multiplying\ this\ Money\ object\ an\ integer\ amount.\n\n\ @param\ anAmount\ the\ integer\ that\ is\ to\ be\ multiplied\ by\ this\ object.\n\ @return\ a\ Money\ object\ equal\ to\ the\ product\ of\ this\ Money\ object\n\ \ \ \ \ \ \ \ \ and\ anAmount.\n
comment8.params=anAmount
comment8.target=Money\ dividedBy(int)
comment8.text=\n\ Returns\ the\ result\ of\ dividing\ this\ Money\ object\ an\ integer\ amount.\n\n\ @param\ anAmount\ the\ integer\ that\ is\ to\ be\ divided\ into\ this\ object.\n\ @return\ a\ Money\ object\ equal\ to\ the\ quotient\ of\ this\ Money\ object\n\ \ \ \ \ \ \ \ \ and\ anAmount.\n
comment9.params=anAmount
comment9.target=boolean\ isEqualTo(Money)
comment9.text=\n\ Compares\ this\ Money\ object\ against\ the\ specified\ Money\ object.\ The\ result\ \n\ is\ true\ if\ and\ only\ if\ the\ two\ objects\ are\ equal.\n\n\ @param\ anAmount\ the\ Money\ object\ that\ is\ to\ be\ compared\ to\ this\ object.\n\ @return\ true\ if\ the\ objects\ are\ equal,\ false\ otherwise.\n
numComments=14
